# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from event_msgs/Trigger.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class Trigger(genpy.Message):
  _md5sum = "df02cf07523e10b927e1abf4e9af62cf"
  _type = "event_msgs/Trigger"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# A DVS trigger

# Numeric value representing the type of trigger signal received
int8 type
# Time of occurence
time timestamp

# Below are constant numeric values describing eah type of trigger
# A timestamp reset occurred.
int8 TRIGGER_TYPE_TIMESTAMP_RESET=0

# A rising edge was detected (External Input module on device).
int8 TRIGGER_TYPE_EXTERNAL_SIGNAL_RISING_EDGE=1

# A falling edge was detected (External Input module on device).
int8 TRIGGER_TYPE_EXTERNAL_SIGNAL_FALLING_EDGE=2

# A pulse was detected (External Input module on device).
int8 TRIGGER_TYPE_EXTERNAL_SIGNAL_PULSE=3

# A rising edge was generated (External Generator module on device).
int8 TRIGGER_TYPE_EXTERNAL_GENERATOR_RISING_EDGE=4

# A falling edge was generated (External Generator module on device).
int8 TRIGGER_TYPE_EXTERNAL_GENERATOR_FALLING_EDGE=5

# An APS frame capture has started (Frame Event will follow).
int8 TRIGGER_TYPE_APS_FRAME_START=6

# An APS frame capture has completed (Frame Event is contemporary).
int8 TRIGGER_TYPE_APS_FRAME_END=7

# An APS frame exposure has started (Frame Event will follow).
int8 TRIGGER_APS_EXPOSURE_START=8

# An APS frame exposure has completed (Frame Event will follow).
int8 TRIGGER_APS_EXPOSURE_END=9

"""
  # Pseudo-constants
  TRIGGER_TYPE_TIMESTAMP_RESET = 0
  TRIGGER_TYPE_EXTERNAL_SIGNAL_RISING_EDGE = 1
  TRIGGER_TYPE_EXTERNAL_SIGNAL_FALLING_EDGE = 2
  TRIGGER_TYPE_EXTERNAL_SIGNAL_PULSE = 3
  TRIGGER_TYPE_EXTERNAL_GENERATOR_RISING_EDGE = 4
  TRIGGER_TYPE_EXTERNAL_GENERATOR_FALLING_EDGE = 5
  TRIGGER_TYPE_APS_FRAME_START = 6
  TRIGGER_TYPE_APS_FRAME_END = 7
  TRIGGER_APS_EXPOSURE_START = 8
  TRIGGER_APS_EXPOSURE_END = 9

  __slots__ = ['type','timestamp']
  _slot_types = ['int8','time']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,timestamp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Trigger, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = 0
      if self.timestamp is None:
        self.timestamp = genpy.Time()
    else:
      self.type = 0
      self.timestamp = genpy.Time()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_b2I().pack(_x.type, _x.timestamp.secs, _x.timestamp.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.type, _x.timestamp.secs, _x.timestamp.nsecs,) = _get_struct_b2I().unpack(str[start:end])
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_b2I().pack(_x.type, _x.timestamp.secs, _x.timestamp.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.type, _x.timestamp.secs, _x.timestamp.nsecs,) = _get_struct_b2I().unpack(str[start:end])
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b2I = None
def _get_struct_b2I():
    global _struct_b2I
    if _struct_b2I is None:
        _struct_b2I = struct.Struct("<b2I")
    return _struct_b2I
