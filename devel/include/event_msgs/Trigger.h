// Generated by gencpp from file event_msgs/Trigger.msg
// DO NOT EDIT!


#ifndef EVENT_MSGS_MESSAGE_TRIGGER_H
#define EVENT_MSGS_MESSAGE_TRIGGER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace event_msgs
{
template <class ContainerAllocator>
struct Trigger_
{
  typedef Trigger_<ContainerAllocator> Type;

  Trigger_()
    : type(0)
    , timestamp()  {
    }
  Trigger_(const ContainerAllocator& _alloc)
    : type(0)
    , timestamp()  {
  (void)_alloc;
    }



   typedef int8_t _type_type;
  _type_type type;

   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TRIGGER_TYPE_TIMESTAMP_RESET)
  #undef TRIGGER_TYPE_TIMESTAMP_RESET
#endif
#if defined(_WIN32) && defined(TRIGGER_TYPE_EXTERNAL_SIGNAL_RISING_EDGE)
  #undef TRIGGER_TYPE_EXTERNAL_SIGNAL_RISING_EDGE
#endif
#if defined(_WIN32) && defined(TRIGGER_TYPE_EXTERNAL_SIGNAL_FALLING_EDGE)
  #undef TRIGGER_TYPE_EXTERNAL_SIGNAL_FALLING_EDGE
#endif
#if defined(_WIN32) && defined(TRIGGER_TYPE_EXTERNAL_SIGNAL_PULSE)
  #undef TRIGGER_TYPE_EXTERNAL_SIGNAL_PULSE
#endif
#if defined(_WIN32) && defined(TRIGGER_TYPE_EXTERNAL_GENERATOR_RISING_EDGE)
  #undef TRIGGER_TYPE_EXTERNAL_GENERATOR_RISING_EDGE
#endif
#if defined(_WIN32) && defined(TRIGGER_TYPE_EXTERNAL_GENERATOR_FALLING_EDGE)
  #undef TRIGGER_TYPE_EXTERNAL_GENERATOR_FALLING_EDGE
#endif
#if defined(_WIN32) && defined(TRIGGER_TYPE_APS_FRAME_START)
  #undef TRIGGER_TYPE_APS_FRAME_START
#endif
#if defined(_WIN32) && defined(TRIGGER_TYPE_APS_FRAME_END)
  #undef TRIGGER_TYPE_APS_FRAME_END
#endif
#if defined(_WIN32) && defined(TRIGGER_APS_EXPOSURE_START)
  #undef TRIGGER_APS_EXPOSURE_START
#endif
#if defined(_WIN32) && defined(TRIGGER_APS_EXPOSURE_END)
  #undef TRIGGER_APS_EXPOSURE_END
#endif

  enum {
    TRIGGER_TYPE_TIMESTAMP_RESET = 0,
    TRIGGER_TYPE_EXTERNAL_SIGNAL_RISING_EDGE = 1,
    TRIGGER_TYPE_EXTERNAL_SIGNAL_FALLING_EDGE = 2,
    TRIGGER_TYPE_EXTERNAL_SIGNAL_PULSE = 3,
    TRIGGER_TYPE_EXTERNAL_GENERATOR_RISING_EDGE = 4,
    TRIGGER_TYPE_EXTERNAL_GENERATOR_FALLING_EDGE = 5,
    TRIGGER_TYPE_APS_FRAME_START = 6,
    TRIGGER_TYPE_APS_FRAME_END = 7,
    TRIGGER_APS_EXPOSURE_START = 8,
    TRIGGER_APS_EXPOSURE_END = 9,
  };


  typedef boost::shared_ptr< ::event_msgs::Trigger_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::event_msgs::Trigger_<ContainerAllocator> const> ConstPtr;

}; // struct Trigger_

typedef ::event_msgs::Trigger_<std::allocator<void> > Trigger;

typedef boost::shared_ptr< ::event_msgs::Trigger > TriggerPtr;
typedef boost::shared_ptr< ::event_msgs::Trigger const> TriggerConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::event_msgs::Trigger_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::event_msgs::Trigger_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::event_msgs::Trigger_<ContainerAllocator1> & lhs, const ::event_msgs::Trigger_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.timestamp == rhs.timestamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::event_msgs::Trigger_<ContainerAllocator1> & lhs, const ::event_msgs::Trigger_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace event_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::event_msgs::Trigger_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::event_msgs::Trigger_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::event_msgs::Trigger_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::event_msgs::Trigger_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::event_msgs::Trigger_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::event_msgs::Trigger_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::event_msgs::Trigger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "df02cf07523e10b927e1abf4e9af62cf";
  }

  static const char* value(const ::event_msgs::Trigger_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdf02cf07523e10b9ULL;
  static const uint64_t static_value2 = 0x27e1abf4e9af62cfULL;
};

template<class ContainerAllocator>
struct DataType< ::event_msgs::Trigger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "event_msgs/Trigger";
  }

  static const char* value(const ::event_msgs::Trigger_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::event_msgs::Trigger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A DVS trigger\n"
"\n"
"# Numeric value representing the type of trigger signal received\n"
"int8 type\n"
"# Time of occurence\n"
"time timestamp\n"
"\n"
"# Below are constant numeric values describing eah type of trigger\n"
"# A timestamp reset occurred.\n"
"int8 TRIGGER_TYPE_TIMESTAMP_RESET=0\n"
"\n"
"# A rising edge was detected (External Input module on device).\n"
"int8 TRIGGER_TYPE_EXTERNAL_SIGNAL_RISING_EDGE=1\n"
"\n"
"# A falling edge was detected (External Input module on device).\n"
"int8 TRIGGER_TYPE_EXTERNAL_SIGNAL_FALLING_EDGE=2\n"
"\n"
"# A pulse was detected (External Input module on device).\n"
"int8 TRIGGER_TYPE_EXTERNAL_SIGNAL_PULSE=3\n"
"\n"
"# A rising edge was generated (External Generator module on device).\n"
"int8 TRIGGER_TYPE_EXTERNAL_GENERATOR_RISING_EDGE=4\n"
"\n"
"# A falling edge was generated (External Generator module on device).\n"
"int8 TRIGGER_TYPE_EXTERNAL_GENERATOR_FALLING_EDGE=5\n"
"\n"
"# An APS frame capture has started (Frame Event will follow).\n"
"int8 TRIGGER_TYPE_APS_FRAME_START=6\n"
"\n"
"# An APS frame capture has completed (Frame Event is contemporary).\n"
"int8 TRIGGER_TYPE_APS_FRAME_END=7\n"
"\n"
"# An APS frame exposure has started (Frame Event will follow).\n"
"int8 TRIGGER_APS_EXPOSURE_START=8\n"
"\n"
"# An APS frame exposure has completed (Frame Event will follow).\n"
"int8 TRIGGER_APS_EXPOSURE_END=9\n"
"\n"
;
  }

  static const char* value(const ::event_msgs::Trigger_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::event_msgs::Trigger_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Trigger_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::event_msgs::Trigger_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::event_msgs::Trigger_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.type);
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EVENT_MSGS_MESSAGE_TRIGGER_H
